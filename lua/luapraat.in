#include "melder.h"
#include "praat_script.h"
#include "luapraat.h"

static const char *LUAPRAAT_LUALIB = R"(include_str!("praat.lua");)";
Interpreter *INTERPRETER;

static int luapraat_call_praat(lua_State *L) {
	autostring32 cmd = Melder_8to32(lua_tostring(L, 1));
	Melder_casual(U"DIVERTING OUTPUT");
	static MelderString infoOutput;
	MelderString_empty(&infoOutput);
	autoMelderDivertInfo divert(&infoOutput);
	Melder_casual(U"RUNNING COMMAND: ", cmd.get());
	// TODO: what does the status tell us, what should we do with it?
	// TODO: this is currently failing with SIGABRT, why? maybe the
	// interpreter doesn't like being used to execute a command while it's
	// still in the middle of executing another one (the parent Lua
	// command)?
	int status = praat_executeCommand(*INTERPRETER, cmd.get());
	Melder_casual(U"PUSHING RESULT ONTO LUA STACK");
	lua_pushstring(L, Melder_32to8(infoOutput.string).get());
	return 1;
}

autostring32 luapraat_run(const char32 *script_path, Interpreter *interpreter) {
	lua_State *L = luaL_newstate();
	luaL_openlibs(L);
	lua_pushcfunction(L, luapraat_call_praat);
	lua_setglobal(L, "_praat");
	luaL_dostring(L, LUAPRAAT_LUALIB);
	lua_setglobal(L, "praat");
	// TODO: is there a cleaner way to pass the interpreter to the C/Lua
	// interface function than via a global? This isn't re-entrant.
	INTERPRETER = interpreter;

	const char *script_path_fs = Melder_peek32to8_fileSystem(script_path);
	int load_error = luaL_loadfile(L, script_path_fs);
	if (load_error) {
		// If something went wrong, error message is at the top of the stack
		Melder_throw(U"Couldn't load file: ", Melder_8to32(lua_tostring(L, -1)).get());
	}

	int call_error = lua_pcall(L, 0, LUA_MULTRET, 0);
	if (call_error) {
		Melder_throw(U"Failed to run script: ", Melder_8to32(lua_tostring(L, -1)).get());
	}

	const char *result_c = lua_tostring(L, -1);
	// NOTE: The conversion assumes UTF-8 output from Lua.
	autostring32 result = Melder_8to32(result_c);
	// Melder_casual(U"number of elements left on stack: ", lua_gettop(L));
	lua_settop(L, 0);
	lua_close(L);
	return result;
}

// vi: ft=cpp:
